// <auto-generated />
using System;
using Entities.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace uReclutment.Migrations
{
    [DbContext(typeof(WebApiDbContext))]
    [Migration("20230808201037_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.DataContext.Candidates", b =>
                {
                    b.Property<int>("CandidatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "candidatesId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CandidatesId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "age");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<string>("ContactSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "contactSource");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "country");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<string>("RecluterName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "recluterName");

                    b.Property<string>("RejectionCandidate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "rejectionCandidate");

                    b.Property<string>("RejectionEmcor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "rejectionEmcor");

                    b.Property<int>("StagesId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "stages");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "vacancy");

                    b.HasKey("CandidatesId");

                    b.HasIndex("StagesId")
                        .IsUnique();

                    b.HasIndex("VacancyId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Entities.DataContext.Comments", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "commentsId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<int>("QuestionDetailsId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "questionDetailsId");

                    b.Property<string>("Value")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("CommentsId");

                    b.HasIndex("QuestionDetailsId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.DataContext.Customers", b =>
                {
                    b.Property<int>("CustomersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "customersId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomersId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "country");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.HasKey("CustomersId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.DataContext.EnumType", b =>
                {
                    b.Property<int>("EnumTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "enumTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnumTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.HasKey("EnumTypeId");

                    b.ToTable("EnumType");
                });

            modelBuilder.Entity("Entities.DataContext.Files", b =>
                {
                    b.Property<int>("FilesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "filesId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilesId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<int>("CandidatesId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "candidatesId");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "path");

                    b.HasKey("FilesId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Entities.DataContext.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "logId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("Error")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "error");

                    b.Property<DateTime>("ErrorDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "errorDate");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "errorMessage");

                    b.HasKey("LogId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Entities.DataContext.Meetings", b =>
                {
                    b.Property<int>("MeetingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "meetingsId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeetingsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<int>("CandidatesId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "candidatesId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<int>("NumberMeeting")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "numberMeeting");

                    b.Property<long?>("Time")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "time");

                    b.HasKey("MeetingsId");

                    b.HasIndex("CandidatesId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Entities.DataContext.QuestionDetails", b =>
                {
                    b.Property<int>("QuestionDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "questionDetailsId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionDetailsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("Answer")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<int>("CandidatesId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "candidatedId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "questionsId");

                    b.HasKey("QuestionDetailsId");

                    b.HasIndex("CandidatesId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("QuestionDetails");
                });

            modelBuilder.Entity("Entities.DataContext.Questions", b =>
                {
                    b.Property<int>("QuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "questionsId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<int>("EnumTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "enumTypeId");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "maxLength");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<string>("Question")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasAnnotation("Relational:JsonPropertyName", "question");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "required");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "vacancyId");

                    b.HasKey("QuestionsId");

                    b.HasIndex("EnumTypeId")
                        .IsUnique();

                    b.HasIndex("VacancyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Entities.DataContext.Requirements", b =>
                {
                    b.Property<int>("RequirementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "requirementsId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequirementsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("AgeExperience")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "ageExperience");

                    b.Property<bool>("Benefits")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "benefits");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCreated")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "required");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "vacancyId");

                    b.HasKey("RequirementsId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("Entities.DataContext.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "SettingsId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettingsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<string>("Value")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Entities.DataContext.Stages", b =>
                {
                    b.Property<int>("StagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "stagesId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StagesId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameCreated");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "NameModified");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "order");

                    b.HasKey("StagesId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Entities.DataContext.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "UserName");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.DataContext.Vacancy", b =>
                {
                    b.Property<int>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "VacancyId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VacancyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CustomersId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Departament")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameCreated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameModified")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NamePosition")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Responsabilitys")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("VacancyId");

                    b.HasIndex("CustomersId");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("Entities.DataContext.Candidates", b =>
                {
                    b.HasOne("Entities.DataContext.Stages", "Stages")
                        .WithOne("Candidates")
                        .HasForeignKey("Entities.DataContext.Candidates", "StagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DataContext.Vacancy", "Vacancy")
                        .WithMany("Candidates")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stages");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Entities.DataContext.Comments", b =>
                {
                    b.HasOne("Entities.DataContext.QuestionDetails", "QuestionDetails")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionDetails");
                });

            modelBuilder.Entity("Entities.DataContext.Meetings", b =>
                {
                    b.HasOne("Entities.DataContext.Candidates", "Candidates")
                        .WithMany("Meetings")
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Entities.DataContext.QuestionDetails", b =>
                {
                    b.HasOne("Entities.DataContext.Candidates", "Candidates")
                        .WithMany("QuestionDetails")
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DataContext.Questions", "Questions")
                        .WithMany("QuestionDetails")
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidates");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Entities.DataContext.Questions", b =>
                {
                    b.HasOne("Entities.DataContext.EnumType", "EnumType")
                        .WithOne("Questions")
                        .HasForeignKey("Entities.DataContext.Questions", "EnumTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DataContext.Vacancy", "Vacancy")
                        .WithMany("Questions")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnumType");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Entities.DataContext.Requirements", b =>
                {
                    b.HasOne("Entities.DataContext.Vacancy", "Vacancy")
                        .WithMany("Requirements")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Entities.DataContext.Vacancy", b =>
                {
                    b.HasOne("Entities.DataContext.Customers", "Customers")
                        .WithMany("Vacancies")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Entities.DataContext.Candidates", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("QuestionDetails");
                });

            modelBuilder.Entity("Entities.DataContext.Customers", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Entities.DataContext.EnumType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Entities.DataContext.QuestionDetails", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Entities.DataContext.Questions", b =>
                {
                    b.Navigation("QuestionDetails");
                });

            modelBuilder.Entity("Entities.DataContext.Stages", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Entities.DataContext.Vacancy", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Questions");

                    b.Navigation("Requirements");
                });
#pragma warning restore 612, 618
        }
    }
}
